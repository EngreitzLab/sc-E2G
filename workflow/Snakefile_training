from snakemake.utils import min_version
min_version("7.0")

import pandas as pd
import os
import yaml


configfile: "config/config_training.yaml"
conda: "mamba"


include: os.path.join("rules", "utils.smk")
include: os.path.join("rules", "utils_training.smk")


## Update paths in the config to be compatible with github submodules
# Need to manually make results_dir an absolute path since above may
# not work if results_dir folder isn't created
# If results_dir is already an absolute path, this is a no-op
config = make_paths_absolute(config, os.getcwd())
config["results_dir"] = os.path.join(os.getcwd(), config["results_dir"])

## Define global variables
RESULTS_DIR = config["results_dir"] 
CELL_CLUSTER_DF = pd.read_table(config["cell_clusters"]).set_index("cluster", drop=False)

## Convert cell cluster config to a biosample config for the ABC pipeline
## Treat each cell cluster as a distinct biosample
config["ABC_BIOSAMPLES"] = os.path.join(
	RESULTS_DIR, 
	"tmp", 
	"config_abc_biosamples.tsv"
	)
make_biosample_config(
	config["cell_clusters"],
	config["ABC_BIOSAMPLES"],
	RESULTS_DIR
)


## Import ENCODE_rE2G pipeline as a reusable module 
module encode_e2g:
	snakefile:
		os.path.join(config["encode_re2g_dir"], "workflow", "Snakefile_training")
	config: get_e2g_training_config(config, config["encode_re2g_dir"])


## Include Snakemake rules from ENCODE_rE2G
use rule * from encode_e2g exclude format_external_features_config, all


## Include additional Snakemake rules
include: os.path.join("rules", "frag_to_tagAlign.smk")
include: os.path.join("rules", "make_kendall_pairs.smk")
include: os.path.join("rules", "generate_atac_matrix.smk")
include: os.path.join("rules", "compute_kendall.smk")
include: os.path.join("rules", "arc_e2g.smk")
include: os.path.join("rules", "add_external_features.smk")

## Import model config table
model_config = pd.read_table(config["model_config"], na_values="").fillna("None").set_index("model", drop=False)

## Define final output files
model_comparison_files = []
model_comparison_files.append(os.path.join(RESULTS_DIR, "performance_across_models.tsv")) # comparison across models
model_comparison_files.extend(expand(os.path.join(RESULTS_DIR, "performance_across_models_{metric}.pdf"), metric=["auprc", "precision"])) # plot of comparisons

# Files for feature analysis
forward_feature_selection_auprc_files = list()
backward_feature_selection_auprc_files = list()
permutation_feature_importance_auprc_files = list()
all_feature_set_files = list()

if config["run_feature_analysis"]:
	forward_feature_selection_auprc_files = expand(
		os.path.join(
			RESULTS_DIR,
			"{dataset}",
			"{model}",
			"feature_analysis",
			"forward_feature_selection_auprc.pdf"
		),
		zip,
		dataset = model_config["dataset"],
		model = model_config["model"]
	)
	backward_feature_selection_auprc_files = expand(
		os.path.join(
			RESULTS_DIR,
			"{dataset}",
			"{model}",
			"feature_analysis",
			"backward_feature_selection_auprc.pdf"
		),
		zip,
		dataset = model_config["dataset"],
		model = model_config["model"]
	)
	permutation_feature_importance_auprc_files = expand(
		os.path.join(
			RESULTS_DIR,
			"{dataset}",
			"{model}",
			"feature_analysis",
			"permutation_feature_importance_auprc.pdf"
		),
		zip,
		dataset = model_config["dataset"],
		model = model_config["model"]
	)

	# Only test all feature sets if polynomial == False and n_features < 14
	for row in model_config.itertuples(index = False):
		#if row.polynomial.startswith("False") or not row.polynomial:
		if not row.polynomial:
			features = pd.read_table(row.feature_table)
			n_features = len(features)
			if n_features < 14:
				all_feature_set_files.append(
					os.path.join(
						RESULTS_DIR, 
						row.dataset, 
						row.model, 
						"feature_analysis", 
						"all_feature_sets.tsv"
					)
				)

# define final output files 
rule all:
	input: 
		models = expand(
			os.path.join(
				RESULTS_DIR,
				"{dataset}",
				"{model}", 
				"model", 
				"model_full.pkl"
			),
			zip,
			dataset = model_config["dataset"],
			model = model_config["model"]
		),
		model_comparison = model_comparison_files,
		forward_feature_selection_auprc = 
			forward_feature_selection_auprc_files,
		backward_feature_selection_auprc =
			backward_feature_selection_auprc_files,
		permutation_feature_importance_auprc =
			permutation_feature_importance_auprc_files,
		all_feature_sets =
			all_feature_set_files

