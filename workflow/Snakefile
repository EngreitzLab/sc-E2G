from snakemake.utils import min_version
min_version("7.0")

import pandas as pd
import os
import yaml


configfile: "config/config.yaml"
conda: "mamba"


include: os.path.join("rules", "utils.smk")

## Update paths in the config to be compatible with github submodules
# Need to manually make results_dir an absolute path since above may
# not work if results_dir folder isn't created
# If results_dir is already an absolute path, this is a no-op
config = make_paths_absolute(config, os.getcwd())
config["results_dir"] = os.path.join(os.getcwd(), config["results_dir"])

## Define global variables
RESULTS_DIR = config["results_dir"] 
SCRIPTS_DIR = os.path.join(os.getcwd(), "workflow", "scripts")
CELL_CLUSTER_DF = pd.read_table(config["cell_clusters"]).set_index("cluster", drop=False)

## Convert cell cluster config to a biosample config for the ABC pipeline
## Treat each cell cluster as a distinct biosample
config["ABC_BIOSAMPLES"] = os.path.join(
	RESULTS_DIR, 
	"tmp", 
	"config_abc_biosamples.tsv"
	)
make_biosample_config(
	config["cell_clusters"],
	config["ABC_BIOSAMPLES"],
	RESULTS_DIR
)


## Import ENCODE_rE2G pipeline as a reusable module 
encode_e2g_config = get_e2g_config(config, config["encode_re2g_dir"])
encode_e2g_config["crispr_dataset"] = get_crispr_file( config["encode_re2g_dir"])

module encode_e2g:
	snakefile:
		os.path.join(config["encode_re2g_dir"], "workflow", "Snakefile")
	config: encode_e2g_config

## Include Snakemake rules from ENCODE_rE2G
use rule * from encode_e2g exclude generate_e2g_predictions, filter_e2g_predictions, format_external_features_config, all

# expand biosamples config
BIOSAMPLE_DF = pd.read_table(config["ABC_BIOSAMPLES"])
BIOSAMPLE_DF = encode_e2g.expand_biosample_df(BIOSAMPLE_DF)

## Include additional Snakemake rules
include: os.path.join("rules", "frag_to_tagAlign.smk")
include: os.path.join("rules", "make_kendall_pairs.smk")
include: os.path.join("rules", "generate_atac_matrix.smk")
include: os.path.join("rules", "compute_kendall.smk")
include: os.path.join("rules", "arc_e2g.smk")
include: os.path.join("rules", "add_external_features.smk")
include: os.path.join("rules", "crispr_benchmarking.smk")



## Define the final outputs of the pipeline
#  file names
output_files = []
encode_e2g_predictions = expand(
			os.path.join(RESULTS_DIR, "{biosample}", "{model_name}", "encode_e2g_predictions.tsv.gz"), zip, biosample=BIOSAMPLE_DF['biosample'], model_name=BIOSAMPLE_DF['model_dir_base'])
prediction_stats = expand(
			os.path.join(RESULTS_DIR, "{biosample}", "{model_name}", "encode_e2g_predictions_threshold{threshold}_stats.tsv"), zip, biosample=BIOSAMPLE_DF["biosample"],
			model_name=BIOSAMPLE_DF['model_dir_base'], threshold=BIOSAMPLE_DF["model_threshold"]),
plots =os.path.join(RESULTS_DIR, "qc_plots.pdf")
model_perf = os.path.join(RESULTS_DIR, "crispr_benchmarking_performance_summary.tsv")

output_files.extend(encode_e2g_predictions)
#output_files.extend(prediction_stats)
output_files.append(plots)

if config["benchmark_performance"]:
 	output_files.append(model_perf)

rule all:
	input: 
		output_files,
		encode_e2g_predictions_bedpe=expand(os.path.join(
				RESULTS_DIR,
				"{biosample}",
				"{model_name}",
				"encode_e2g_predictions_threshold{threshold}.bedpe"),zip,biosample=BIOSAMPLE_DF["biosample"],model_name=BIOSAMPLE_DF["model_dir_base"], threshold=BIOSAMPLE_DF["model_threshold"]),
		combined_all_putative_file=expand(os.path.join(RESULTS_DIR, "combined_Predictions_{model_name}", "combined_only_expressed_genes_EnhancerPredictionsAllPutative.tsv.gz"),model_name=BIOSAMPLE_DF['model_dir_base']),
		combined_thresholded=expand(os.path.join(RESULTS_DIR, "combined_Predictions_{model_name}", "encode_e2g_predictions_threshold{threshold}.tsv.gz"), zip, threshold=BIOSAMPLE_DF["model_threshold"],model_name=BIOSAMPLE_DF['model_dir_base']),
		combined_variantOverlap = expand(os.path.join(RESULTS_DIR, "combined_Predictions_{model_name}", "encode_e2g_predictions_threshold{threshold}.ForVariantOverlap.shrunk150bp.gz"), zip, threshold=BIOSAMPLE_DF["model_threshold"],model_name=BIOSAMPLE_DF['model_dir_base']),
		combined_accessible_peaks=expand(os.path.join(RESULTS_DIR, "combined_Predictions_{model_name}", "combined_accessible_peaks.tsv.gz"),model_name=BIOSAMPLE_DF['model_dir_base'])

