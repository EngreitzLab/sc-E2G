from snakemake.utils import min_version
min_version("7.0")

import pandas as pd
import os
import yaml


configfile: "config/config.yaml"
conda: "mamba"

def make_paths_absolute(obj, base_path):
	"""
	Use absolute paths to be compatible with github submodules
	Recursively go through the dictionary and convert relative paths to absolute paths.
	"""
	if isinstance(obj, dict):
		for key, value in obj.items():
			obj[key] = make_paths_absolute(value, base_path)
	elif isinstance(obj, str):
		# We assume all strings are paths. If converting the string
		# to an absolute path results in a valid file, then the str was a path
		new_file = os.path.join(base_path, obj)
		if os.path.exists(new_file):
			return new_file
	return obj

config = make_paths_absolute(config, os.getcwd())
# Need to manually make results_dir an absolute path since above may
# not work if results_dir folder isn't created
# If results_dir is already an absolute path, this is a no-op
config["results_dir"] = os.path.join(os.getcwd(), config["results_dir"])
RESULTS_DIR = config["results_dir"]
E2G_DIR_PATH = config["E2G_DIR_PATH"]

def get_e2g_config(config):
	e2g_config_file = os.path.join(E2G_DIR_PATH, "config/config.yaml")
	with open(e2g_config_file, 'r') as stream:
		e2g_config = yaml.safe_load(stream)
	e2g_config["E2G_DIR_PATH"] = E2G_DIR_PATH
	e2g_config["ABC_BIOSAMPLES"] = config["ABC_BIOSAMPLES"]
	e2g_config["results_dir"] = config["results_dir"]
	return e2g_config


module encode_e2g:
	snakefile:
		f"{E2G_DIR_PATH}/workflow/Snakefile"
	config: get_e2g_config(config)

use rule * from encode_e2g

### Wei-Lin: fill out
rule kendall_correlation:
	input:
		abc_predictions = os.path.join(RESULTS_DIR, "{biosample}", "Predictions", "EnhancerPredictionsAllPutative.tsv.gz"),
		# Whatever else you need ...
		# e.g candidate_regions = os.path.join(RESULTS_DIR, "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted.candidateRegions.bed"),

	output:
		predictions_w_kendall = os.path.join(RESULTS_DIR, "{biosample}", "Predictions", "EnhancerPredictionsAllPutative_Kendall.tsv.gz"), 


### Maya: fill out
# rule train_e2g:
# 	input:
# 		crispr_data = os.path.join(RESULTS_DIR, "{biosample}", "EPCrisprBenchmark_ensemble_data_GRCh38.K562_ActivityOnly_features_{nafill}.tsv.gz")
# 		enhancer_list = os.path.join(RESULTS_DIR, "{biosample}", "Neighborhoods", "EnhancerList.txt"),
# 		...
# 	output:
# 		models_dir = ...