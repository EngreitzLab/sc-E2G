from snakemake.utils import min_version
min_version("7.0")

import pandas as pd
import os
import yaml


configfile: "config/config.yaml"
conda: "mamba"


include: os.path.join("rules", "utils.smk")


## Update paths in the config to be compatible with github submodules
# Need to manually make results_dir an absolute path since above may
# not work if results_dir folder isn't created
# If results_dir is already an absolute path, this is a no-op
config = make_paths_absolute(config, os.getcwd())
config["results_dir"] = os.path.join(os.getcwd(), config["results_dir"])


## Define global variables
RESULTS_DIR = config["results_dir"] # used in ENCODE_rE2G/ABC/workflow/rules/macs2.smk 


## Convert cell cluster config to a biosample config for the ABC pipeline
## Treat each cell cluster as a distinct biosample
make_biosample_config(
	config["cell_clusters"],
	os.path.join(
		config["results_dir"], 
		"tmp", 
		"config_abc_biosamples.tsv"
	),
	config["results_dir"]
)
config["ABC_BIOSAMPLES"] = os.path.join(
	config["results_dir"], 
	"tmp", 
	"config_abc_biosamples.tsv"
	)


## Import ENCODE_rE2G pipeline as a reusable module 
module encode_e2g:
	snakefile:
		os.path.join(config["encode_re2g_dir"], "workflow", "Snakefile")
	config: get_e2g_config(config, config["encode_re2g_dir"])


## Include Snakemake rules from ENCODE_rE2G
use rule * from encode_e2g exclude add_external_features, all


## Include additional Snakemake rules
include: os.path.join("rules", "generate_frag_file.smk")
include: os.path.join("rules", "frag_to_tagAlign.smk")
include: os.path.join("rules", "make_kendall_pairs.smk")
include: os.path.join("rules", "generate_atac_matrix.smk")
include: os.path.join("rules", "compute_kendall.smk")
include: os.path.join("rules", "arc_e2g.smk")
include: os.path.join("rules", "add_external_features.smk")


## Import cell cluster configuration table and make a list of cell clusters
CELL_CLUSTER_DF = pd.read_table(config["cell_clusters"]).set_index("cluster", drop=False)
CLUSTER = CELL_CLUSTER_DF["cluster"].to_list()


## Define the final outputs of the pipeline
rule all:
	input: 
		encode_e2g_predictions = expand(
			os.path.join(
				config["results_dir"], 
				"{cluster}", 
				"Predictions", 
				"encode_e2g_predictions.tsv.gz"
			), 
			cluster=CLUSTER
		),
		prediction_stats = [os.path.join
			(
			config["results_dir"], 
			f"{cluster}", 
			"Metrics", 
			f"encode_e2g_predictions_threshold{encode_e2g.get_threshold(cluster)}_stats.tsv"
			) for cluster in CLUSTER],
		plots = os.path.join(config["results_dir"], "qc_plots.pdf")

